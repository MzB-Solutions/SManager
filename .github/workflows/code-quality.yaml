name: Code Quality/Coverage
on:
  push:
    branches: [ master,dev ]
  pull_request:
    branches: [ master,dev ]
    types: [opened, synchronize, reopened]
jobs:
  sonarcloud-local:
    runs-on: windows-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      #NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
      NUGET_PACKAGES: ~/.nuget/packages
      SMANAGER_VERSION: v20.12.124 # We use this to force "unique"-enough cache keys, that we can "flush" when we update the version internally
      BUILD_CONFIG: Debug
      BUILD_VERBOSITY: 'n' ## q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive
    - uses: actions/setup-java@v1
      with:
        java-version: '11' # The JDK version to make available on the path.
        java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
        architecture: x64 # (x64 or x86) - defaults to x64
    - name: Cache NuGet Packages
      id: cache-nuget
      uses: actions/cache@v2
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ env.SMANAGER_VERSION }}-${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ env.SMANAGER_VERSION }}-${{ runner.os }}-nuget-
    - name: Cache SonarCloud packages
      id: cache-sonar-packages
      uses: actions/cache@v2
      with:
        path: ~/.sonar
        key: ${{ env.SMANAGER_VERSION }}-${{ runner.os }}-sonar-cache
        restore-keys: ${{ env.SMANAGER_VERSION }}-${{ runner.os }}-sonar-cache
    - name: Cache Dotnet 5.0
      id: cache-dotnet-5
      uses: actions/cache@v2
      with:
        key: ${{ env.SMANAGER_VERSION }}-${{ runner.os }}-dotnet
        path: ${{ env.LOCALAPPDATA }}\Microsoft\dotnet
    - name: Install dotnet 5.0
      id: install-dotnet-5
      if: steps.cache-dotnet-5.outputs.cache-hit != 'true'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - name: Prepare environment
      id: env-prep
      shell: powershell
      run: |
        dotnet tool update dotnet-testx --no-cache --global -v ${{ env.BUILD_VERBOSITY }}
        dotnet tool update dotnet-reportgenerator-globaltool --no-cache --global -v ${{ env.BUILD_VERBOSITY }}
        dotnet tool update dotnet-sonarscanner --no-cache --tool-path ./.sonar/scanner  -v ${{ env.BUILD_VERBOSITY }}
        dotnet clean --configuration ${{ env.BUILD_CONFIG }} -v ${{ env.BUILD_VERBOSITY }}
        dotnet restore --packages ${{ env.NUGET_PACKAGES }} --no-cache --force -v ${{ env.BUILD_VERBOSITY }}
    - name: Build and analyze
      id: build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        ./.sonar/scanner/dotnet-sonarscanner begin /k:"MzB-Solutions_SManager" /o:"mzb-solutions" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="coverage/results.xml" /d:sonar.cs.nunit.reportsPaths="coverage/nunit-result.xml" /d:sonar.cs.vstest.reportsPaths="coverage/MSTest-result.trx"
        dotnet build --configuration ${{ env.BUILD_CONFIG }} -v ${{ env.BUILD_VERBOSITY }}
        dotnet test --configuration ${{ env.BUILD_CONFIG }} -r ./coverage/ -s ./SManager.Core.Tests/CoreTests.runsettings --test-adapter-path:. --logger:"trx;LogFilePath=MSTest-result.trx" --logger:"nunit;LogFilePath=nunit-result.xml" --collect:"Code Coverage" -v ${{ env.BUILD_VERBOSITY }}
        dotnet testx --project all --verbose
        cp ./SManager.Core.Tests/nunit-result.xml -Destination ./coverage/nunit-result.xml
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
    - name: NUnit Reporter
      id: nunit-report
      uses: MirrorNG/nunit-reporter@v1.0.9
      if: always()
      with:
        path: |
          ./coverage/nunit-result.xml
        access-token: ${{ secrets.GITHUB_TOKEN }}
    - name: ReportGenerator
      id: report-generator
      if: always() # ignore this failure (for now), so we can at least have a hope of finishing a run
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.1
      with:
#        reports: './coverage/results.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        reports: 'coverage/*.trx' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coverage' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'lcov'
        verbosity: 'Info'
    - name: Coveralls
      id: coveralls
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Output the Directories and Contents
      if: (steps.env-prep.outcome == 'failure' || steps.build.outcome == 'failure')
      shell: powershell
      run: |
        Write-Output "---------------------"
        Write-Output "Environment Variables"
        Write-Output "---------------------"
        'Get-ChildItem env:'
        Write-Output "--------------"
        Write-Output "Coverage Files"
        Write-Output "--------------"
        Get-ChildItem -Path ./coverage/ -Recurse *.*
        Write-Output "-----------"
        Write-Output "NuGet Tools"
        Write-Output "-----------"
        Get-ChildItem -Path ${{ env.NUGET_PACKAGES }} -Recurse *.exe
        Write-Output "-----------------"
        Write-Output "Test Output Files"
        Write-Output "  (*.xml|*.trx)"
        Write-Output "-----------------"
        Get-ChildItem -Path ./SManager.Core.Tests/ -Recurse *.xml
        Get-ChildItem -Path ./SManager.Core.Tests/ -Recurse *.trx
    - name: Notify of Build result status
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORDBUILDSBOT }}
        status: ${{ job.status }}
        username: MzB Build Notifications
