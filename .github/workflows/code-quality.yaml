name: Code Quality/Coverage
on:
  push:
    branches: [ master,dev ]
  pull_request:
    branches: [ master,dev ]
    types: [opened, synchronize, reopened]
jobs:
  code-quality-sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-java@v1
      with:
        java-version: '12' # The JDK version to make available on the path.
        java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
        architecture: x64 # (x64 or x86) - defaults to x64
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      with:
        args: >
          -Dsonar.verbose=true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  code-quality-local:
    runs-on: windows-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive
    - uses: actions/setup-java@v1
      with:
        java-version: '11' # The JDK version to make available on the path.
        java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
        architecture: x64 # (x64 or x86) - defaults to x64
    - name: Cache NuGet Packages
      id: cache-nuget
      uses: actions/cache@v2
      with:
        path: ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Cache SonarCloud packages
      id: cache-sonar-packages
      uses: actions/cache@v2
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar-cache
        restore-keys: ${{ runner.os }}-sonar-cache
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v2
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Cache Dotnet 5.0
      id: cache-dotnet-5
      uses: actions/cache@v2
      with:
        key: ${{ runner.os }}-dotnet
        path: ${{ env.LOCALAPPDATA }}\Microsoft\dotnet
    - name: Install dotnet 5.0
      if: steps.cache-dotnet-5.outputs.cache-hit != 'true'
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path ./.sonar/scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        ./.sonar/scanner/dotnet-sonarscanner begin /k:"MzB-Solutions_SManager" /o:"mzb-solutions" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.nunit.reportsPaths="*.Tests/test-result.xml"
        dotnet restore -v n
        dotnet build --configuration Debug --no-restore -v n
        dotnet test --configuration Debug -r ./TestResults/ -s ./SManager.Core.Tests/CoreTests.runsettings --test-adapter-path:. --logger:"nunit;LogFilePath=test-result.xml"
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      if: ${{ always() }}
    - name: NUnit Reporter
      uses: MirrorNG/nunit-reporter@v1.0.9
      if: always()
      with:
        path: |
          SManager.Core.Tests/test-result.xml"
        access-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Notify of Build result status
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORDBUILDSBOT }}
        status: ${{ job.status }}
        username: MzB Build Notifications
